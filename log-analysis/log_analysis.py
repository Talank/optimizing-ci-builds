import json
import sys
import os
import glob
from collections import defaultdict
import csv
from pathlib import Path
import pathlib
log_directory=sys.argv[1]
proj_list = os.listdir(log_directory)
failure_type=[]
first_failure_name_count={}
first_failure_name_projName=defaultdict(list)

all_failure_name_count={}
all_failure_name_projName=defaultdict(list)
count=0
#print(proj_list)
job_count=0
sha = log_directory.replace("/","").replace("logs","")
print(sha)
print(log_directory)

result_file_name="AutoGeneratedGithubAction-"+sha+".csv"

with open(result_file_name , 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["Project Name", "File Name", "Jobs Name", "Status with Instrumentation"])
'''for proj in proj_list:
    for file in glob.glob(log_directory+proj+"/*.json"):
        json_file=file
        #print('json_file='+json_file)
        with open(json_file) as user_file:
            file_contents = user_file.read()
            parsed_json = json.loads(file_contents)
            for i in range(len(parsed_json)-1): # This one is for each job
                jobs=parsed_json['jobs']
                jobs_count=parsed_json['total_count']
                job_count=jobs_count+job_count 

                for k in range(len(jobs)):
                    build_name=jobs[k]['name']
                    with open('students.csv', 'a', newline='') as file:
                        writer = csv.writer(file)
                        writer.writerow([proj, json_file,bb],build_name.replace('"',''))'''
               
#print(count)


for proj in proj_list:
    for file in glob.glob(log_directory+proj+"/*.json"):
        json_file=file
        #print('json_file='+json_file)
        with open(json_file) as user_file:
            file_contents = user_file.read()
            parsed_json = json.loads(file_contents)
            for i in range(len(parsed_json)-1): # This one is for each job
                jobs=parsed_json['jobs']
                jobs_count=parsed_json['total_count']
                job_count=jobs_count+job_count 
                #print('job len='+str(len(job_len)))
                for k in range(len(jobs)):
                    build_name=jobs[k]['name']
                    build_conclusion=jobs[k]['conclusion']
                    #print(build_name)
                    if build_conclusion=="failure" :
                        #print('proj_name='+proj)
                        steps_content=jobs[k]['steps']
                        #print('len='+str(len(steps_content)))

                        for j in range(len(steps_content)):
                            if (steps_content[j]['conclusion'] == "failure"):
                                if not steps_content[j]['name'] in first_failure_name_count: 
                                    first_failure_name_count[steps_content[j]['name']]=1
                                    first_failure_name_projName[steps_content[j]['name']].append(proj)
                                else:
                                    count=first_failure_name_count[steps_content[j]['name']]
                                    first_failure_name_count[ steps_content[j]['name'] ] = count + 1
                                    first_failure_name_projName[steps_content[j]['name']].append(proj)
                                break
                               
                    with open(result_file_name, 'a', newline='') as file:
                        writer = csv.writer(file)
                        if build_conclusion == None:
                            build_conclusion="in_progress"
                        file_name_only=Path(json_file).name            
                        
                        writer.writerow([proj, file_name_only,build_name, build_conclusion])

print('total job_count='+str(job_count))
print('======Result for first fialure in each job=======')
for x, y in first_failure_name_count.items():
  print(x,":",y) 
print("************Project name and each failure step*********")
for x, y in first_failure_name_projName.items():
  print(x,":",y) 
#print(first_failure_name_projName)
                #elif build_conclusion=="skipped" :



#print(all_failure_name_count)
#print(all_failure_name_projName)
